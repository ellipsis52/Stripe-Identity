> do | config |
> # rspec-expectations config goes her# rYou cbash: json: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ require
> 'rest-client'
> require
> 'stripe'
> require
> 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use anbash: require: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ 'rest-client'
> require
> 'stripe'
> require
> 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # abash: rest-client: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ require
> 'stripe'
> require
> 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/bash: require: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ 'stripe'
> require
> 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectatioThe official command-line tool to interact with Stripe.
> 
> Usage:
>   stripe [command]
> 
> Webhook commands:
>   listen                             Listen for webhook events
>   trigger                            Trigger test webhook events
> 
> Stripe commands:
>   logs                               Interact with Stripe API request logs
>   status                             Check the status of the Stripe API
> 
> Resource commands:
>   get                           Quickly retrieve resources from Stripe
>   charges                       Make requests (capture, create, list, etc) on charges
>   customers                     Make requests (create, delete, list, etc) on customers
>   payment_intents               Make requests (cancel, capture, confirm, etc) on payment intents
>   ...                           To see more resource commands, run `stripe resources help`
> 
> Other commands:
>   community                          Chat with Stripe engineers and other developers
>   completion                         Generate bash and zsh completion scripts
>   config                             Manually change the config values for the CLI
>   feedback                           Provide us with feedback on the CLI
>   fixtures                           Run fixtures to populate your account with data
>   help                               Help about any command
>   login                              Login to your Stripe account
>   logout                             Logout of your Stripe account
>   open                               Quickly open Stripe pages
>   samples                            Sample integrations built by Stripe
>   serve                              Serve static files locally
>   version                            Get the version of the Stripe CLI
> 
> Flags:
>       --api-key string        Your API key to use for the command
>       --color string          turn on/off color output (on, off, auto)
>       --config string         config file (default is $HOME/.config/stripe/config.toml)
>       --device-name string    device name
>   -h, --help                  help for stripe
>       --log-level string      log level (debug, info, trace, warn, error) (default "info")
>   -p, --project-name string   the project name to read from for config (default "default")
>   -v, --version               Get the version of the Stripe CLI
> 
> Use "stripe [command] --help" for more information about a command.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ require
> 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation librarybash: require: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ 'dotenv'
> 
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wbash: dotenv: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wro(env) (base) iMac-de-Guido:identity-main webtechnicom$ # This file was generated by the `rspec --init` command. Conventionally, all
> # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rs(env) (base) iMac-de-Guido:identity-main webtechnicom$ # specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
> # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It (env) (base) iMac-de-Guido:identity-main webtechnicom$ # The generated `.rspec` file contains `--require spec_helper` which will cause
> # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text (env) (base) iMac-de-Guido:identity-main webtechnicom$ # this file to always be loaded, without a need to explicitly require it in any
> # files.
> #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_s(env) (base) iMac-de-Guido:identity-main webtechnicom$ # files.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ #
> # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4(env) (base) iMac-de-Guido:identity-main webtechnicom$ # Given that it is always loaded, you are encouraged to keep this file as
> # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rathe(env) (base) iMac-de-Guido:identity-main webtechnicom$ # light-weight as possible. Requiring heavyweight dependencies from this file
> # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_c(env) (base) iMac-de-Guido:identity-main webtechnicom$ # will add to the boot time of your test suite on EVERY test run, even for an
> # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can (env) (base) iMac-de-Guido:identity-main webtechnicom$ # individual file that may not need all of that loaded. Instead, consider making
> # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `(env) (base) iMac-de-Guido:identity-main webtechnicom$ # a separate helper file that requires the additional dependencies and performs
> # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you fr(env) (base) iMac-de-Guido:identity-main webtechnicom$ # the additional setup, and require it from the spec files that actually need
> # it.
> #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This i(env) (base) iMac-de-Guido:identity-main webtechnicom$ # it.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ #
> # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generall(env) (base) iMac-de-Guido:identity-main webtechnicom$ # See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ RSpec.configure
> do | config |
> # rspec-expectations config goes her# rYou can use an alternate
> # assertion/expectation library such as wrong or the stdlib/minitest
> # assertions if you prefer.
> config.expect_with: rspec
> do | expectations |
> # This option will default to `true` in RSpec 4. It makes the `description`
> # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doublebash: RSpec.configure: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ do | config |
> bash: syntax error near unexpected token `do'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # rspec-expectations config goes her# rYou can use an alternate
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # assertion/expectation library such as wrong or the stdlib/minitest
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # assertions if you prefer.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ config.expect_with: rspec
> bash: config.expect_with:: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ do | expectations |
> bash: syntax error near unexpected token `do'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # This option will default to `true` in RSpec 4. It makes the `description`
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # and `failure_message` of custom matchers include text for helper methods
> # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # defined using `chain`, e.g.:
> #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_b(env) (base) iMac-de-Guido:identity-main webtechnicom$ #     be_bigger_than(2).and_smaller_than(4).description
> #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below ar(env) (base) iMac-de-Guido:identity-main webtechnicom$ #     # => "be bigger than 2 and smaller than 4"
> # ...rather than:
> #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
(env) (base) iMac-de-Guido:identity-main webtechnicom$ # ...rather than:
(env) (base) iMac-de-Guido:identi> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # ...rather than:
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ #     # => "be bigger than 2"
> expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr h(env) (base) iMac-de-Guido:identity-main webtechnicom$ expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes here. You can use an alternate test double
> # library (such as bogus or mocha) by changing the `mock_with` option here.
> config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bash: expectations.include_chain_clauses_in_custom_matcher_descripexpectations.include_chain_clauses_in_cgoes: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # library (such as bogus or mocha) by changing the `mock_with` option here.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ config.mock_with: rspec
> do | mocks |
> # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for bash: config.mock_with:: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ do | mocks |
> bash: syntax error near unexpected token `do'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # Prevents you from mocking or stubbing a method that does not exist on
> # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> # metadata: `fit`, `fdescribe` a(env) (base) iMac-de-Guido:identity-main webtechnicom$ # a real object. This is generally recommended, and will default to
> # `true` in RSpec 4.
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # `true` in RSpec 4.ibe` and `fcontext`, re#
> mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> # metadata: `fit`, `fdescribe` and `fcontext`, re# metadata: `fit`, `fdescribe` and `fcontext`, re#
> # Allows RSpec to per(env) (base) iMac-de-Guido:identity-main webtechnicom$ mocks.verify_partial_doubles = true
> end
> 
> # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> # metadata: `fit`, `fdescribe` and `fcontext`, re# metadata: `fit`, `fdescribe` and `fcontext`, re#
> # Allows RSpec to persist some state between runs in orderbash: mocks.verify_partial_doubles: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ end
> bash: end: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
> # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> # metadata: `fit`, `fdescribe` and `fcontext`, re# metadata: `fit`, `fdescribe` and `fcontext`, re#
> # Allows RSpec to persist some state between runs in order to support
> # the `--only-failures` and `--next-failure` CLI options. We recommend(env) (base) iMac-de-Guido:identity-main webtechnicom$ # have no way to turn it off -- the option exists only for backwards
> # compatibility in RSpec 3). It causes shared context metadata to be
> # inherited by the metadata hash of host groups and examples, rather than
> # triggering imp# triggeri-inclusion in groups with matching metadata.
> config.shared_contexconfig.sta_behavior =:apply_to_configroups
> 
> # The settings below are suggested to provi# Thegood initial experience
> # with RSpec, but feel free to customi# with RSr heart's content.
> =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> # is tagged with `:focus`, all examples get run. RSpec also provides
> # aliases for `it`, `describe`, and `context` that include `:focus`
> # metadata: `fit`, `fdescribe` and `fcontext`, re# metadata: `fit`, `fdescribe` and `fcontext`, re#
> # Allows RSpec to persist some state between runs in order to support
> # the `--only-failures` and `--next-failure` CLI options. We recommend
> # you config# you config# you config# you config# you config# you co(env) (base) iMac-de-Guido:identity-main webtechnicom$ # compatibility in RSpec 3). It causes shared context metadata to be
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # inherited by the metadata hash of host groups and examples, rather than
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # triggering imp# triggeri-inclusion in groups with matching metadata.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ config.shared_contexconfig.sta_behavior =:apply_to_configroups
> bash: config.shared_contexconfig.sta_behavior: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # The settings below are suggested to provi# Thegood initial experience
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # with RSpec, but feel free to customi# with RSr heart's content.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg
> bash: =b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=b=bg: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # is tagged with `:focus`, all examples get run. RSpec also provides
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # aliases for `it`, `describe`, and `context` that include `:focus`
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # metadata: `fit`, `fdescribe` and `fcontext`, re# metadata: `fit`, `fdescribe` and `fcontext`, re#
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # Allows RSpec to persist some state between runs in order to support
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # the `--only-failures` and `--next-failure` CLI options. We recommend
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # you config# you config# you config# you config# you config# you config# youe_status_persistence_file_path = "spec/examples.txt"
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # Limits the available syntax to the non-monkey patched syntax that is
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # recommended. For more details, see:
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
> #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
> config.disable_monkey_patching!
> 
> # This setting enables warnings. It's recommended, but in some cases may
> # be too noisy due to issues in dependencies.
> config.warnings = true
> 
> # Many RSpec users commonly either run the entire suite or an individual
> # file, and it's useful to allow more verbose output when running an
> # individual spec file.
> if config.files_to_run.one?
> # Use the documentation formatter for detailed output,
> # unless a formatter has already been configured
> # (e.g. via a command-line flag).
> config.default_formatter = "doc"
> end
> 
> # Print the 10 slowest examples and example groups at the
> # end of the spec run, to help surface which specs are running
> # particularly slow.
> config.profile_examples = 10
> 
> # Run specs in random order to surface order dependencies. If you find an
> # order dependency and want to debug it, you can fix th# order depend(env) (base) iMac-de-Guido:identity-main webtechnicom$ #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
> config.disable_monkey_patching!
> 
> # This setting enables warnings. It's recommended, but in some cases may
> # be too noisy due to issues in dependencies.
> config.warnings = true
> 
> # Many RSpec users commonly either run the entire suite or an individual
> # file, and it's useful to allow more verbose output when running an
> # individual spec file.
> if config.files_to_run.one?
> # Use the documentation formatter for detailed output,
> # unless a formatter has already been configured
> # (e.g. via a command-line flag).
> config.default_formatter = "doc"
> end
> 
> # Print the 10 slowest examples and example groups at the
> # end of the spec run, to help surface which specs are running
> # particularly slow.
> config.profile_examples = 10
> 
> # Run specs in random order to surface order dependencies. If you find an
> # order dependency and want to debug it, you can fix th# order dependency and want to debug it, you cted after each run.
> #     --seed 1234
> cococococococococococococococococococococococococococococococococo(env) (base) iMac-de-Guido:identity-main webtechnicom$ config.disable_monkey_patching!
> bash: config.disable_monkey_patching!: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # This setting enables warnings. It's recommended, but in some cases may
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # be too noisy due to issues in dependencies.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ config.warnings = true
> bash: config.warnings: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # Many RSpec users commonly either run the entire suite or an individual
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # file, and it's useful to allow more verbose output when running an
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ # individual spec file.
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ if config.files_to_run.one?
> > # Use the documentation formatter for detailed output,
> > # unless a formatter has already been configured
> > # (e.g. via a command-line flag).
> > config.default_formatter = "doc"
> > end
> >
> > # Print the 10 slowest examples and example groups at the
> # end of the spec run, to help surface which specs are running
> # particularly slow.
> config.profile_examples = 10
> 
> # Run specs in random order to surface order dependencies. If you find an
> # order dependency and want to debug it, you can fix th# order dependency and want to debug it, you cted after each run.
> #     --seed 1234
> cococococococococococococococococococococococococococococococococococococococococococoCLI option.
> # Setting this allows you to use `--seed` to deterministically reproduce
> # test failures related to randomization by passing the same `--seed` value
> # as the one that triggered the failure.
> Kernel.srand
> config.seed
> =end
> end
> 
> SERVER_URL = ENV.fetch('SERVER_URL', 'http://localhost:4242')
> Dotenv.load
> Stripe.api_key = ENV['STRIPE_SECRET_KEY']
> Stripe.max_network_retries = 2
> Stripe.api_version = "2020-08-27"
> 
> 
> def server_url
>     SERVER_URL
> 
> 
> end
> 
> 
> def get(path, *args, **kwargs)
>     RestClient.get("#{SERVER_U> # end of the spec run, to help surface which specs are running
> > # particularly slow.
> > config.profile_examples = 10
> >
> > # Run specs in random order to surface order dependencies. If you find an
> > # order dependency and want to debug it, you can fix th# order dependency and want to debug it, you cted after each run.
> > #     --seed 1234
> > cococococococococococococococococococococococococococococococococococococococococococoCLI option.
> > # Setting this allows you to use `--seed` to deterministically reproduce
> > # test failures related to randomization by passing the same `--seed` value
> > # as the one that triggered the failure.
> > Kernel.srand
> > config.seed
> > =end
> > end
> >
> > SERVER_URL = ENV.fetch('SERVER_URL', 'http://localhost:4242')
> bash: syntax error near unexpected token `('
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ Dotenv.load
> bash: Dotenv.load: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ Stripe.api_key = ENV['STRIPE_SECRET_KEY']
> bash: Stripe.api_key: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ Stripe.max_network_retries = 2
> bash: Stripe.max_network_retries: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ Stripe.api_version = "2020-08-27"
> bash: Stripe.api_version: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ def server_url
> bash: def: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     SERVER_URL
> bash: SERVER_URL: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ end
> bash: end: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ def get(path, *args, **kwargs)
> bash: syntax error near unexpected token `('
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     RestClient.get("#{SERVER_URL}#{path}", *args, **kwargs)
> bash: syntax error near unexpected token `"#{SERVER_URL}#{path}",'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ enenenenenenenenenenenenenenenenenenenenenenenensponse = RestClient.get("#{SERVER_URL}#{path}", *args, **kwargs)
> bash: syntax error near unexpected token `('
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     JSON.parse(response.body)
> bash: syntax error near unexpected token `response.body'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ end
> bash: end: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ def post_json(path, payload, **kwargs)
> bash: syntax error near unexpected token `('
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     defaults = {content_type::json}
> Command line interface to a user's defaults.
> Syntax:
> 
> 'defaults' [-currentHost | -host <hostname>] followed by one of the following:
> 
>   read                                 shows all defaults
>   read <domain>                        shows defaults for given domain
>   read <domain> <key>                  shows defaults for given domain, key
> 
>   read-type <domain> <key>             shows the type for the given domain, key
> 
>   write <domain> <domain_rep>          writes domain (overwrites existing)
>   write <domain> <key> <value>         writes key for domain
> 
>   rename <domain> <old_key> <new_key>  renames old_key to new_key
> 
>   delete <domain>                      deletes domain
>   delete <domain> <key>                deletes key in domain
> 
>   import <domain> <path to plist>      writes the plist at path to domain
>   import <domain> -                    writes a plist from stdin to domain
>   export <domain> <path to plist>      saves domain as a binary plist to path
>   export <domain> -                    writes domain as an xml plist to stdout
>   domains                              lists all domains
>   find <word>                          lists all entries containing word
>   help                                 print this help
> 
> <domain> is ( <domain_name> | -app <application_name> | -globalDomain )
>          or a path to a file omitting the '.plist' extension
> 
> <value> is one of:
>   <value_rep>
>   -string <string_value>
>   -data <hex_digits>
>   -int[eger] <integer_value>
>   -float  <floating-point_value>
>   -bool[ean] (true | false | yes | no)
>   -date <date_rep>
>   -array <value1> <value2> ...
>   -array-add <value1> <value2> ...
>   -dict <key1> <value1> <key2> <value2> ...
>   -dict-add <key1> <value1> ...
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     response = RestClient.post(
> bash: syntax error near unexpected token `('
> (env) (base) iMac-de-Guido:identity-main webtechnicom$         "#{SERVER_URL}#{path}",
> bash: #{SERVER_URL}#{path},: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$         payload.to_json,
> bash: payload.to_json,: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$         defaults.merge(**kwargs)
> bash: syntax error near unexpected token `**kwargs'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     )
> bash: syntax error near unexpected token `)'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$     [JSON.parse(response.body), response.code]
> bash: syntax error near unexpected token `response.body'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ rescue = > e
> bash: rescue: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ begin
> bash: begin: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ [JSON.parse(e.http_body), e.http_code]
> bash: syntax error near unexpected token `e.http_body'
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ rescue = > e
> bash: rescue: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ puts
> bash: puts: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ "Response:"
> bash: Response:: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ p
> bash: p: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ response
> bash: response: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ throw
> bash: throw: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ "Failed to parse failed response"
> bash: Failed to parse failed response: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ end
> bash: end: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$ end
> bash: end: command not found
> (env) (base) iMac-de-Guido:identity-main webtechnicom$
> 
> 